{"version":3,"sources":["actions/index.js","services/omdbApi.js","features/search/ResultsList.jsx","features/search/Search.jsx","selectors/index.js","actions/getResults.js","App.js","reducers/index.js","serviceWorker.js","index.js"],"names":["resultsReceived","title","results","type","errorMessage","API_KEY","OMDB_API_URL","getSearchResults","query","a","queryEncoded","trim","replace","Promise","resolve","fetch","method","then","res","json","ResultsList","props","className","map","result","href","imdbID","rel","target","src","Poster","alt","Title","height","width","Year","Search","dispatch","useDispatch","useState","titleInput","setTitleInput","searchType","setSearchType","useSelector","state","selectResults","Form","onSubmit","e","preventDefault","searchTypeSet","Error","fetchResults","FormGroup","Label","for","Input","name","placeholder","value","onChange","id","Button","color","size","onClick","length","App","initialState","search_type","Boolean","window","location","hostname","match","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0590702.chunk.js","sourcesContent":["export const titleSet = title => ({\n  type: 'TITLE_SET',\n  title\n});\n\nexport const searchTypeSet = searchType => ({\n  type: 'SEARCH_TYPE_SET',\n  searchType\n});\n\nexport const resultsReceived = (title, results) => ({\n  type: 'RESULTS_RECEIVED',\n  results,\n  title,\n  errorMessage: ''\n});\n\nexport const searchCleared = () => ({\n  type: 'SEARCH_CLEARED',\n  results: [],\n  title: '',\n  errorMessage: ''\n});\n\nexport const searchFailed = (errorMessage) => ({\n  type: 'SEARCH_FAILED',\n  results: [],\n  title: '',\n  errorMessage: errorMessage\n});\n","const API_KEY = 'e889c907';\nconst OMDB_API_URL = `https://www.omdbapi.com/`;\n\nexport const getSearchResults = async (query, type) => {\n  const queryEncoded = query.trim().replace(\" \", \"+\");\n\n  return new Promise((resolve) => {\n    fetch(`${OMDB_API_URL}?apikey=${API_KEY}&s=${queryEncoded}&type=${type}&page=1`, {\n      method: \"GET\",\n    }).then((res) => {\n      resolve(res.json());\n    });\n  });\n};\n\nexport const getItem = async (id) =>\n  new Promise((resolve) => {\n    fetch(`${OMDB_API_URL}?apikey=${API_KEY}&i=${id}`, {\n      method: \"GET\",\n    }).then((res) => {\n      resolve(res.json());\n    });\n  });\n","import React from 'react';\n\nexport default function ResultsList(props) {\n  const { results } = props;\n\n  return (\n    <div>\n      <ul className=\"list-group\">\n        {results.map(result => (\n          <li key={result.imdbID} className=\"list-group-item\">\n            <div>\n              <a href={`https://www.imdb.com/title/${result.imdbID}/`} rel=\"noreferrer\" target=\"_blank\">\n                <img\n                  className=\"float-start img-fluid me-2\"\n                  src={result.Poster} \n                  alt={result.Title}\n                  height=\"100\" \n                  width=\"65\" \n                />\n              </a>\n              <p className=\"fw-bold mb-1\">{result.Title} ({result.Year})</p>\n              <a href={`https://www.imdb.com/title/${result.imdbID}/`} rel=\"noreferrer\" target=\"_blank\">\n                https://www.imdb.com/title/{result.imdbID}/\n              </a>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { searchCleared, searchTypeSet, titleSet } from '../../actions/index';\nimport { fetchResults } from '../../actions/getResults';\nimport { selectResults } from '../../selectors';\nimport ResultsList from './ResultsList';\n\nexport default function Search () {\n  const dispatch = useDispatch();\n\n  const [titleInput, setTitleInput] = useState('');\n  const [searchType, setSearchType] = useState('');\n\n  const errorMessage = useSelector(state => state.errorMessage);\n  const results = useSelector(state => selectResults(state));\n\n  const clearSearch = () => {\n    setTitleInput('');\n    setSearchType('');\n    dispatch(searchCleared());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(titleSet(titleInput));\n    dispatch(searchTypeSet(searchType));\n    dispatch(fetchResults(titleInput, searchType));\n  };\n \n  return (\n    <div className=\"container my-3\">\n      <Form onSubmit={handleSubmit}>\n        <FormGroup className=\"row\">\n          <div className=\"col-md-6\">\n            <Label for=\"movieTitle\">Search by title</Label>\n            <Input \n              name=\"movieTitle\"\n              placeholder=\"title\"\n              type=\"text\"\n              value={titleInput}\n              onChange={(e) => setTitleInput(e.target.value)}\n            />\n          </div>\n          <div className=\"col-auto\">\n            <Label for=\"type\">Type</Label>\n            <select \n              id=\"searchType\"\n              name=\"searchType\"\n              className=\"form-select\"\n              value={searchType}\n              onChange={e => setSearchType(e.target.value)}\n            >\n              <option value=\"\">Type...</option>\n              <option value=\"movie\">Movie</option>\n              <option value=\"series\">Series</option>\n              <option value=\"episode\">Episode</option>\n            </select>\n          </div>\n        </FormGroup>\n\n        <FormGroup className=\"mt-2\">\n          <Button\n            className=\"me-2\"\n            color=\"secondary\" \n            size=\"sm\" \n            onClick={clearSearch}>\n              Clear\n          </Button>\n          <Button color=\"primary\" size=\"sm\" type=\"submit\">Search</Button>\n        </FormGroup>\n      </Form>\n      <div className=\"row mt-3\">\n        <div className=\"col-md-8\">\n          <p>Results for {titleInput}: </p>\n          {errorMessage && (\n            <div className=\"text-warning\">{errorMessage}</div>\n          )}\n          {results.length > 0 && (\n            <ResultsList \n              results={results}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","export const selectTitle = state => state.title;\nexport const selectType = state => state.type;\nexport const selectResults = state => state.results;\n","import { getSearchResults } from '../services/omdbApi.js';\nimport { resultsReceived, searchFailed } from './index';\n\nexport const fetchResults = (title, type) => async dispatch => {\n  const results = await getSearchResults(title, type);\n  if (results.Error) {\n    return dispatch(searchFailed(results.Error));\n  }\n\n  dispatch(resultsReceived(title, results.Search));\n}\n","import React from 'react';\nimport Search from './features/search/Search';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        <nav className=\"navbar bg-light\">\n          <div className=\"container-fluid ms-5 py-2\">\n            <h2 className=\"mb-0\">🎞️ OMDb Search</h2>\n          </div>\n        </nav>\n      </header>\n      \n      <div className=\"App\">\n        <Search />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const initialState = {\n  title: '',\n  search_type: '',\n  results: [],\n};\n\nexport default function appReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'TITLE_SET':\n      return {\n        ...state,\n        title: action.title\n      };\n    case 'SEARCH_TYPE_SET':\n      return {\n        ...state,\n        search_type: action.searchType\n      };\n    case 'SEARCH_CLEARED':\n      return {\n        ...state,\n        title: action.title,\n        results: action.results,\n        errorMessage: action.errorMessage,\n      };\n    case 'SEARCH_FAILED':\n        return {\n          ...state,\n          title: action.title,\n          errorMessage: action.errorMessage,\n        };\n    case 'RESULTS_RECEIVED':\n      return {\n        ...state,\n        title: action.title,\n        results: action.results,\n        errorMessage: action.errorMessage\n      };\n    default:\n      return state\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware));\n// The store now has the ability to accept thunk functions in `dispatch`\nconst store = createStore(rootReducer, composedEnhancer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}